name: "Publish Release"

on:
    workflow_dispatch:
        inputs:
            release-type:
                description: "Choose release type (release or pre-release)"
                required: true
                default: "release"
                type: choice
                options:
                    - pre-release
                    - release

permissions:
    contents: write
    packages: write
    checks: write
    pull-requests: write

jobs:
    test:
        uses: ./.github/workflows/test.yml

    test-scripts:
        name: Test Release Scripts
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.x"

            - name: Install Dependencies
              run: |
                  cd .github/scripts
                  python -m pip install uv
                  uv venv
                  source .venv/bin/activate
                  uv pip install -r requirements.txt

            - name: Run Unit Tests
              run: |
                  cd .github/scripts
                  source .venv/bin/activate
                  python -m pytest test_*.py -v --cov=. --cov-report=term-missing --ignore=test_integration.py

            - name: Run Integration Tests
              env:
                  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
              run: |
                  cd .github/scripts
                  source .venv/bin/activate
                  python -m pytest test_integration.py -v --api-key=$OPENROUTER_API_KEY

    prepare:
        needs: [test, test-scripts]
        name: Prepare Release
        runs-on: ubuntu-latest
        outputs:
            new_version: ${{ steps.version.outputs.new_version }}
            has_changes: ${{ steps.version.outputs.has_changes }}
            release_notes: ${{ steps.notes.outputs.release_notes }}

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.x"

            - name: Install Python Dependencies
              run: |
                  pip install requests

            - name: Determine Version
              id: version
              run: |
                  python .github/scripts/version_manager.py \
                    --release-type ${{ github.event.inputs.release-type }} \
                    --github-output $GITHUB_OUTPUT

            - name: Check for Changes
              if: steps.version.outputs.has_changes != 'true'
              run: |
                  echo "No changes detected since last release. Skipping release process."
                  exit 0

            - name: Generate Release Notes
              id: notes
              run: |
                  python .github/scripts/generate_release_notes.py \
                    --release-type ${{ github.event.inputs.release-type }} \
                    --version ${{ steps.version.outputs.new_version }} \
                    --changesets '${{ steps.version.outputs.changesets }}' \
                    --github-output $GITHUB_OUTPUT \
                    --api-key ${{ secrets.OPENROUTER_API_KEY }}

            - name: Update CHANGELOG.md
              run: |
                  python .github/scripts/overwrite_changeset_changelog.py \
                    --version ${{ steps.version.outputs.new_version }} \
                    --content "${{ steps.notes.outputs.release_notes }}"

            - name: Update package.json Version
              run: |
                  VERSION=${{ steps.version.outputs.new_version }}
                  # Remove v prefix for package.json
                  VERSION=${VERSION#v}
                  npm version $VERSION --no-git-tag-version

            - name: Commit Changes
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git add CHANGELOG.md package.json
                  git commit -m "Release ${{ steps.version.outputs.new_version }}"
                  git push

    publish:
        needs: prepare
        if: needs.prepare.outputs.has_changes == 'true'
        name: Publish Extension
        runs-on: ubuntu-latest
        environment: publish

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20.15.1

            # Cache root dependencies - only reuse if package-lock.json exactly matches
            - name: Cache root dependencies
              uses: actions/cache@v4
              id: root-cache
              with:
                  path: node_modules
                  key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

            # Cache webview-ui dependencies - only reuse if package-lock.json exactly matches
            - name: Cache webview-ui dependencies
              uses: actions/cache@v4
              id: webview-cache
              with:
                  path: webview-ui/node_modules
                  key: ${{ runner.os }}-npm-webview-${{ hashFiles('webview-ui/package-lock.json') }}

            - name: Install root dependencies
              if: steps.root-cache.outputs.cache-hit != 'true'
              run: npm ci

            - name: Install webview-ui dependencies
              if: steps.webview-cache.outputs.cache-hit != 'true'
              run: cd webview-ui && npm ci

            - name: Install Publishing Tools
              run: npm install -g vsce ovsx

            - name: Create Git Tag
              run: |
                  VERSION=${{ needs.prepare.outputs.new_version }}
                  echo "Tagging with $VERSION"
                  git tag "$VERSION"
                  git push origin "$VERSION"

            - name: Package and Publish Extension
              env:
                  VSCE_PAT: ${{ secrets.VSCE_PAT }}
                  OVSX_PAT: ${{ secrets.OVSX_PAT }}
              run: |
                  # Required to generate the .vsix
                  VERSION=${{ needs.prepare.outputs.new_version }}
                  VERSION=${VERSION#v}  # Remove v prefix for package name
                  vsce package --out "cline-${VERSION}.vsix"

                  if [ "${{ github.event.inputs.release-type }}" = "pre-release" ]; then
                    npm run publish:marketplace:prerelease
                    echo "Successfully published pre-release version ${VERSION} to VS Code Marketplace and Open VSX Registry"
                  else
                    npm run publish:marketplace
                    echo "Successfully published release version ${VERSION} to VS Code Marketplace and Open VSX Registry"
                  fi

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ needs.prepare.outputs.new_version }}
                  files: "*.vsix"
                  body: ${{ needs.prepare.outputs.release_notes }}
                  prerelease: ${{ github.event.inputs.release-type == 'pre-release' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
